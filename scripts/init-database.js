#!/usr/bin/env node

const { query } = require('../src/database')
const AuthService = require('../src/auth/authService')

async function initializeDatabase() {
  console.log('üîß Inicializando banco de dados...')
  
  try {
    // Testar conex√£o
    const result = await query('SELECT NOW() as current_time')
    console.log('‚úÖ Conex√£o com PostgreSQL estabelecida:', result.rows[0].current_time)
    
    // Verificar se as tabelas existem
    const tablesResult = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('users', 'tokens', 'whatsapp_sessions')
    `)
    
    console.log('üìã Tabelas encontradas:', tablesResult.rows.map(row => row.table_name))
    
    // Verificar se existe usu√°rio padr√£o
    const defaultUser = await AuthService.getUserById('default_user')
    
    if (!defaultUser) {
      console.log('üë§ Criando usu√°rio padr√£o...')
      const newUser = await AuthService.createUser('Usu√°rio Padr√£o', 'Usu√°rio padr√£o para testes')
      console.log('‚úÖ Usu√°rio padr√£o criado:', newUser.user_id)
    } else {
      console.log('‚úÖ Usu√°rio padr√£o j√° existe')
    }
    
    // Limpar tokens expirados
    const cleanedTokens = await AuthService.cleanupExpiredTokens()
    console.log(`üßπ ${cleanedTokens} tokens expirados removidos`)
    
    console.log('üéâ Banco de dados inicializado com sucesso!')
    
  } catch (error) {
    console.error('‚ùå Erro ao inicializar banco de dados:', error)
    process.exit(1)
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  initializeDatabase()
    .then(() => {
      console.log('‚úÖ Script conclu√≠do')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Erro no script:', error)
      process.exit(1)
    })
}

module.exports = { initializeDatabase } 