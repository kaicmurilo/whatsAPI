const axios = require('axios')

// Configura√ß√µes
const BASE_URL = 'http://localhost:3000'
const API_KEY = 'test_api_key' // Use a API key configurada no seu .env

async function testUsersSwagger() {
  console.log('üß™ Testando documenta√ß√£o de gerenciamento administrativo de usu√°rios...\n')
  
  try {
    // 1. Testar endpoint de listagem de idiomas
    console.log('1Ô∏è‚É£ Testando listagem de idiomas...')
    try {
      const languagesResponse = await axios.get(`${BASE_URL}/api-docs/languages`)
      console.log('‚úÖ Idiomas dispon√≠veis:', languagesResponse.data)
      
      // Verificar se 'clients' est√° na lista
      const usersDoc = languagesResponse.data.data.find(lang => lang.code === 'clients')
      if (usersDoc) {
        console.log('‚úÖ Documenta√ß√£o de usu√°rios encontrada:', usersDoc)
      } else {
        console.log('‚ùå Documenta√ß√£o de usu√°rios n√£o encontrada')
      }
    } catch (error) {
      console.log('‚ùå Erro ao listar idiomas:', error.response?.status, error.response?.data)
    }
    
    // 2. Testar acesso √† documenta√ß√£o de usu√°rios
    console.log('\n2Ô∏è‚É£ Testando acesso √† documenta√ß√£o de usu√°rios...')
    try {
      const usersResponse = await axios.get(`${BASE_URL}/api-docs/clients`)
      console.log('‚úÖ Documenta√ß√£o de usu√°rios acess√≠vel')
      console.log(`üìä Status: ${usersResponse.status}`)
      console.log(`üìã Content-Type: ${usersResponse.headers['content-type']}`)
    } catch (error) {
      console.log('‚ùå Erro ao acessar documenta√ß√£o de usu√°rios:', error.response?.status, error.response?.data)
    }
    
    // 3. Testar JSON da documenta√ß√£o de usu√°rios
    console.log('\n3Ô∏è‚É£ Testando JSON da documenta√ß√£o de usu√°rios...')
    try {
      const usersJsonResponse = await axios.get(`${BASE_URL}/api-docs/json/clients`)
      console.log('‚úÖ JSON da documenta√ß√£o de usu√°rios acess√≠vel')
      console.log(`üìä T√≠tulo: ${usersJsonResponse.data.info.title}`)
      console.log(`üìã Descri√ß√£o: ${usersJsonResponse.data.info.description}`)
      console.log(`üîó Endpoints: ${Object.keys(usersJsonResponse.data.paths).length}`)
      
      // Verificar se cont√©m APENAS os endpoints de gerenciamento administrativo
      const expectedEndpoints = [
        '/auth/users',
        '/auth/users/{userId}',
        '/auth/users/{userId}/tokens',
        '/auth/users/{userId}/sessions'
      ]
      
      // Endpoints que N√ÉO devem estar na documenta√ß√£o de usu√°rios
      const forbiddenEndpoints = [
        '/auth/authenticate',
        '/auth/refresh',
        '/auth/revoke',
        '/auth/verify',
        '/session/start',
        '/session/status',
        '/session/qr',
        '/client/sendMessage'
      ]
      
      const foundEndpoints = Object.keys(usersJsonResponse.data.paths)
      console.log('üìã Endpoints encontrados:', foundEndpoints)
      
      // Verificar endpoints esperados
      console.log('\n‚úÖ Verificando endpoints de gerenciamento administrativo:')
      expectedEndpoints.forEach(endpoint => {
        if (foundEndpoints.includes(endpoint)) {
          console.log(`   ‚úÖ ${endpoint} - OK`)
        } else {
          console.log(`   ‚ùå ${endpoint} - FALTANDO`)
        }
      })
      
      // Verificar endpoints que N√ÉO devem estar
      console.log('\n‚ùå Verificando endpoints que N√ÉO devem estar na documenta√ß√£o de usu√°rios:')
      forbiddenEndpoints.forEach(endpoint => {
        if (foundEndpoints.includes(endpoint)) {
          console.log(`   ‚ùå ${endpoint} - N√ÉO DEVERIA ESTAR AQUI`)
        } else {
          console.log(`   ‚úÖ ${endpoint} - CORRETO (n√£o est√° aqui)`)
        }
      })
      
      // Verificar se a documenta√ß√£o √© espec√≠fica para admin
      const description = usersJsonResponse.data.info.description
      if (description.includes('administrativo') || description.includes('admin')) {
        console.log('‚úÖ Descri√ß√£o indica que √© documenta√ß√£o administrativa')
      } else {
        console.log('‚ùå Descri√ß√£o n√£o indica que √© documenta√ß√£o administrativa')
      }
      
      // Verificar se usa nomenclatura correta (usu√°rios)
      if (description.includes('usu√°rios') || description.includes('users')) {
        console.log('‚úÖ Descri√ß√£o usa nomenclatura correta (usu√°rios)')
      } else {
        console.log('‚ùå Descri√ß√£o n√£o usa nomenclatura correta')
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao acessar JSON de usu√°rios:', error.response?.status, error.response?.data)
    }
    
    // 4. Testar p√°gina principal de sele√ß√£o
    console.log('\n4Ô∏è‚É£ Testando p√°gina principal de sele√ß√£o...')
    try {
      const mainResponse = await axios.get(`${BASE_URL}/api-docs`)
      console.log('‚úÖ P√°gina principal acess√≠vel')
      console.log(`üìä Status: ${mainResponse.status}`)
      console.log(`üìã Content-Type: ${mainResponse.headers['content-type']}`)
      
      // Verificar se cont√©m link para usu√°rios
      if (mainResponse.data.includes('/api-docs/clients')) {
        console.log('‚úÖ Link para documenta√ß√£o de usu√°rios encontrado na p√°gina principal')
      } else {
        console.log('‚ùå Link para documenta√ß√£o de usu√°rios n√£o encontrado')
      }
      
      // Verificar se cont√©m descri√ß√£o correta
      if (mainResponse.data.includes('Gerenciamento Administrativo')) {
        console.log('‚úÖ T√≠tulo correto encontrado na p√°gina principal')
      } else {
        console.log('‚ùå T√≠tulo incorreto na p√°gina principal')
      }
      
      if (mainResponse.data.includes('usu√°rios')) {
        console.log('‚úÖ Descri√ß√£o correta encontrada na p√°gina principal')
      } else {
        console.log('‚ùå Descri√ß√£o incorreta na p√°gina principal')
      }
    } catch (error) {
      console.log('‚ùå Erro ao acessar p√°gina principal:', error.response?.status, error.response?.data)
    }
    
    // 5. Testar endpoint de cria√ß√£o de usu√°rio (p√∫blico)
    console.log('\n5Ô∏è‚É£ Testando endpoint de cria√ß√£o de usu√°rio...')
    try {
      const createUserResponse = await axios.post(`${BASE_URL}/auth/users`, {
        user_name: 'Usu√°rio Teste Admin',
        user_documento_identificacao: '123.456.789-00',
        description: 'Usu√°rio criado para teste da documenta√ß√£o administrativa'
      })
      console.log('‚úÖ Endpoint de cria√ß√£o de usu√°rio funcionando')
      console.log(`üìä Usu√°rio criado: ${createUserResponse.data.data.user_id}`)
      console.log(`üìã Documento: ${createUserResponse.data.data.user_documento_identificacao}`)
      
      // Salvar user_id para testes posteriores
      const testUserId = createUserResponse.data.data.user_id
      
      // 6. Testar endpoint de listagem de usu√°rios (requer admin)
      console.log('\n6Ô∏è‚É£ Testando endpoint de listagem de usu√°rios...')
      try {
        const listUsersResponse = await axios.get(`${BASE_URL}/auth/users`, {
          headers: { 'x-api-key': API_KEY }
        })
        console.log('‚úÖ Endpoint de listagem de usu√°rios funcionando')
        console.log(`üìä Total de usu√°rios: ${listUsersResponse.data.data.length}`)
      } catch (error) {
        console.log('‚ùå Erro ao listar usu√°rios:', error.response?.status, error.response?.data)
      }
      
      // 7. Testar endpoint de tokens do usu√°rio
      console.log('\n7Ô∏è‚É£ Testando endpoint de tokens do usu√°rio...')
      try {
        const tokensResponse = await axios.get(`${BASE_URL}/auth/users/${testUserId}/tokens`, {
          headers: { 'x-api-key': API_KEY }
        })
        console.log('‚úÖ Endpoint de tokens do usu√°rio funcionando')
        console.log(`üìä Tokens encontrados: ${tokensResponse.data.data.length}`)
      } catch (error) {
        console.log('‚ùå Erro ao listar tokens:', error.response?.status, error.response?.data)
      }
      
      // 8. Testar endpoint de sess√µes do usu√°rio
      console.log('\n8Ô∏è‚É£ Testando endpoint de sess√µes do usu√°rio...')
      try {
        const sessionsResponse = await axios.get(`${BASE_URL}/auth/users/${testUserId}/sessions`, {
          headers: { 'x-api-key': API_KEY }
        })
        console.log('‚úÖ Endpoint de sess√µes do usu√°rio funcionando')
        console.log(`üìä Sess√µes encontradas: ${sessionsResponse.data.data.length}`)
      } catch (error) {
        console.log('‚ùå Erro ao listar sess√µes:', error.response?.status, error.response?.data)
      }
      
    } catch (error) {
      console.log('‚ùå Erro ao criar usu√°rio:', error.response?.status, error.response?.data)
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message)
  }
  
  console.log('\nüèÅ Teste conclu√≠do!')
  console.log('\nüìù Resumo:')
  console.log('   - Documenta√ß√£o deve conter APENAS endpoints de gerenciamento administrativo')
  console.log('   - N√ÉO deve conter endpoints de autentica√ß√£o ou WhatsApp')
  console.log('   - Deve ser espec√≠fica para administradores')
  console.log('   - Deve usar nomenclatura correta (usu√°rios, n√£o clientes)')
  console.log('   - Deve incluir campo user_documento_identificacao')
  console.log('   - Endpoints devem funcionar com API key master')
  console.log('   - Interface deve indicar claramente que √© para admin')
}

// Executar teste
if (require.main === module) {
  testUsersSwagger()
}

module.exports = { testUsersSwagger } 